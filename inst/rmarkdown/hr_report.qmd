---
title: "Checks for HR-plus data"
author:
  - name: Markus Skyttner
    orcid: 0000-0002-4649-3651
    email: markussk@kth.se
    affiliations:
      - name: KTH Royal Institute of Technology 
        address: Osquars backe 31
        city: Stockholm
        postal-code: 114 28
highlight-style: pygments
fig-cap-location: top
format:
  html:
    toc: true
    toc-location: left
    code-fold: true
    html-math-method: katex
    embed-resources: true
    anchor-sections: true
    smooth-scroll: true
    link-external-icon: true
    link-external-newwindow: true
    page-layout: article
editor_options: 
  chunk_output_type: console
---

```{r warning=FALSE, results='hide', echo=TRUE}
#| label: load-pkgs
#| code-summary: "Packages"
#| message: false

pkgs <- "
kthcorpus DT bslib leaflet plotly htmltools dplyr
" 

import <- function(x)
 x |> trimws() |> strsplit("\\s+") |> unlist() |>
  lapply(function(x) library(x, character.only = TRUE)) |> 
  invisible()

pkgs |> import()
  
```

```{r}
#| classes: col_wrap
#| echo: FALSE
#| message: FALSE

bs4_card <- function(body, title) {
  div(class = "table-responsive",
    class = "card",
    div(class = "card-header bg-primary", title),
    div(class = "card-body d-flex justify-content-center", body)
  )
}

```


```{r}
#| echo: FALSE
#| message: FALSE
#| 
options(DT.options = list(scrollY = "100vh"))

myDT <- function(data) {
  
  if (is.null(data) || nrow(data) <= 0) 
    return(htmltools::pre("Denna kontroll passerar utan anm√§rkning! ü•≥"))

  # remap column display names here, replace iff in map
  displaynamez <- kthcorpus:::check_remap_colnames(colnames(data))
  
  header_cb <- c(
    "function(thead, data, start, end, display){",
    sprintf("  var tooltips = [%s];", toString(paste0("'", names(displaynamez), "'"))),
    "  for(var i = 0; i <= tooltips.length - 1; i++){",
    "    $('th:eq('+i+')',thead).attr('title', tooltips[i]);",
    "  }",
    "}"
  )  
  
  
  colnamez <- stringr::str_trunc(colnames(data), 15)
  font_size <- "80%"
  
  dt <- DT::datatable(data, 
    filter = "top",
    escape = FALSE,
    rownames = FALSE,
    style = "bootstrap",
    # see https://getbootstrap.com/docs/5.1/content/tables/
    class = "table-borderless table-striped table-sm",
    fillContainer = TRUE,
    width = "100%",
    extensions = c(
      "Buttons",  
      "Select",
      "Scroller"
    ),
    colnames = colnamez,
    options = list(
      headerCallback = DT::JS(header_cb),
      dom = "fBlrtip",  # specify content (search box, etc)
#      dom = 'pt',
# l - Length changing
# f - Filtering input
# t - The Table!
# i - Information
# p - Pagination
# r - pRocessing
      scrollX = TRUE, 
      scrollY = "100vh",
      #paging = FALSE,
      #bPaginate = FALSE,
      #deferRender = FALSE,
      scroller = TRUE,
      select = TRUE,
      buttons = list(
        I("colvis"),  
        "csv",  
        "excel",
        list(
          extend = "copy",
          text = 'Copy to clipboard',
          exportOptions = list(modifier = list(selected = TRUE))
        )
      )#,
      #initComplete = htmlwidgets::JS(
      #  "function(settings, json) {",
      #  paste0("$(this.api().table().container()).css({'font-size': '", font_size, "'});"),
      #  "}"
      #)
    )
  )  
  #NB this causes DT to not fill vertically
  #htmltools::div(dt, style = "font-size:80%")  
  dt
}

myTOC <- function(data) {
  
  if (is.null(data) || nrow(data) <= 0) 
    return(htmltools::pre("No TOC to display"))
  
  font_size <- "80%"
  
  DT::datatable(data,
    escape = FALSE,
    rownames = FALSE,
    style = "bootstrap",
    class = "table-borderless table-sm", 
    width = "100%",
    options = list(
      dom = 't',
      searching = FALSE,
      ordering = FALSE,
      #scrollX = TRUE, 
      scrollY = "80vh"
    )
  )  
}


compact_cols <- function(data) {
  mask_keep <- colSums(!is.na(data)) > 0
  data[, mask_keep, drop = FALSE]
}

# checks <- kth_diva_checks()
# 
# stats <- function(x) 
#   checks$stats %>% 
#   dplyr::filter(name == x) %>% 
#   dplyr::pull(value) %>% 
#   (function(x) ifelse(x == 0, "‚úÖ",sprintf("(%s)‚ùó", x)))

```

```{css, echo=FALSE}
div.col_wrap div.bslib-column-wrap {
  display: grid;
}
.tooltip-inner {max-width: 500px;}
.dataTables_scrollBody {
    max-height: 100vh !important;
```

```{r}
#| message: false
#| eval: true
#| echo: false


#hrp <- hr_plus()

hrp <- fetch_hr24()

hrp_extra <- function(hrp) {
    hrp |>
    left_join(hr24_employment_title |> select(-any_of("emp_desc")), by = c("emp_code")) |>
    mutate(is_uf_ta = is_uf_ta == "UF") |>
    left_join(scb_topics, by = c("scb_topic" = "id")) |>
    rename(
      "scb_topic_swe" = "Swedish",
      "scb_topic_eng" = "English",
      "scb_topic_level" = "level" 
    )
}

hrpe <- hrp_extra(hrp)

hrp_current <-
  hrpe |>
  filter(emp_beg <= lubridate::today(), emp_end > lubridate::today()) |>
  group_by(kthid) |>
  summarize(
    across(c("emp_end", "emp_beg"), max)
  ) |>
  arrange(desc(emp_end), desc(emp_beg)) |>
  inner_join(hrp |> select(-any_of(c("emp_end", "emp_beg"))), by = c("kthid")) |>
#  filter(kthid == "u1jyqnf5") |> 
#  View()
  #count(kthid) |> filter(n > 1) |> ungroup()
  unique() # ten are not unique

hrp_summary <-
  hrpe |> group_by(kthid) |>
  summarize(
#    elm = max(emp_lastmod),
    ebeg = min(emp_beg),
    eend = max(emp_end),
    duration = eend - ebeg,
    ttl = eend - Sys.Date(),
    n = length(kthid),
    yob = max(yob)
  ) |>
  arrange(desc(n))

hrp <-
  hrpe |>
  distinct(kthid, unit_abbr, lastname, firstname, email) |>
  mutate(username = gsub("@kth\\.se", "", email)) |>
  mutate(fullname = trimws(paste0(lastname, ", ", firstname))) |>
  select(-any_of(c("email", "lastname", "firstname")))

check_hr_age_deviants <- function(max_age_years = 100) {
  # employees older than old or began employment before birth
  hrp_summary |> 
  mutate(age_at_ebeg = lubridate::year(ebeg) - yob) |> 
  filter(ebeg < Sys.Date() - max_age_years * 365 | age_at_ebeg < 0 | yob == 1900) |> 
  left_join(hrpe, by = c("kthid", "yob")) |> 
  select(kthid, ebeg, yob, duration, ttl, unit_abbr, lastname, firstname)
}

check_hr_long_end <- function(y_eend_from = 6) {
  # employments that last for more than 6 years (PhD-students?)
  # and not permanent employment (ends 2999-12-31)
  hrp_current |>
    mutate(
      duration = emp_end - emp_beg,
      ttl = emp_end - Sys.Date()
    ) |>
    filter(
      emp_end != '2999-12-31',
      ttl > lubridate::duration(y_eend_from, units="years"),
    ) |>
    select(kthid, emp_beg, emp_end, duration, ttl, unit_abbr, emp_desc, lastname, firstname)
}

check_hr_elm <- function(offset = 60) {
  # last modified date is set more than 2 months into the future
  # or before the beginning date
  hrp_summary |> 
    filter(elm > Sys.Date() + offset | elm < ebeg) |> 
  left_join(hrpe, by = "kthid") |> 
  select(kthid, elm, ebeg, duration, ttl, unit_abbr, lastname, firstname) |> 
  arrange(desc(ttl))
}

check_hr_endsbeforebeg <- function() {
  # people that end their employment even before beginning it or in the same day
  hrpe |>
    filter(emp_end <= emp_beg) |> 
    select(kthid, emp_beg, emp_end, unit_abbr, lastname, firstname, emp_desc) |> 
    mutate(duration = emp_end - emp_beg) |> 
    arrange(duration)
}

check_missing_kthid <- function() {
  # people that have no kthid given
  hrpe |> 
    filter(is.na(kthid)) |> 
    select(kthid, username, firstname, lastname, emp_end, emp_beg, unit_abbr, emp_desc) |> 
    arrange(-desc(lastname))
}

check_hr_topics <- function() {
  # People with non existing SCB topic codes
  hrp_current |>
    filter(!scb_topic %in% c(scb_topics$id, "999"), !is.na(scb_topic)) |> 
    group_by(scb_topic) |>
    mutate(n = n()) |> 
    ungroup() |> 
    select(scb_topic, n, kthid, unit_abbr, unit_name, lastname, firstname)
}

check_hr_fullname <- function() {
  re <- "\\s{2,}|[[:cntrl:]]|.*?\\s+$"
  hrpe |> filter(grepl(re, lastname) | grepl(re, firstname)) |> 
    select(kthid, unit_abbr, firstname, lastname)
}

```


::: {.panel-tabset}

## Age deviants

Some employees might be older than 100 years or started employment before being born or may be born exactly on 1900 (anno domini).

:::{.callout-note}
Note that this is likely data quality issues (?)
:::

```{r}
#| label: fig-age-deviants
#| fig-cap: Age deviants
#| message: false
#| column: screen-inset-shaded

my_dt1 <- 
  check_hr_age_deviants() |> 
  datatable(
    style = "bootstrap4", # "bootstrap" or "bootstrap4" or "auto" (for bslib)
    class = "table-bordered table-condensed table-sm",
    rownames = FALSE,
    height = "100%",
    escape = FALSE,
    extensions = "RowGroup",
    options = list(
#      rowGroup = list(dataSrc = 0),  # if rownames are used, increase index!
      paging = FALSE,
      dom = "iftr"  # display number of records at top
    ),
    selection = "none"
  )

# Available "dom" settings:
# l - length changing input control
# f - filtering input
# t - The table!
# i - Table information summary
# p - pagination control
# r - processing display element

bs4_card(my_dt1, "Age deviants")

```

## Long employments

Some employees have an employment end date set more than 6 years into the future.

:::{.callout-note}
Some of these employemnts may end in `r as.integer(Sys.Date() |> substr(1,4))+6`, just slightly over 6 years. That might be in order if these are PhD students?
:::

```{r}
#| label: fig-long-employments
#| fig-cap: Employees with employments ending long into the future
#| message: false
#| column: screen-inset-shaded

my_dt2 <- 
  check_hr_long_end() |> 
  datatable(
    style = "bootstrap4", # "bootstrap" or "bootstrap4" or "auto" (for bslib)
    class = "table-bordered table-condensed table-sm",
    rownames = FALSE,
    height = "100%",
    escape = FALSE,
    extensions = "RowGroup",
    options = list(
#      rowGroup = list(dataSrc = 0),  # if rownames are used, increase index!
      paging = FALSE,
      dom = "iftr"  # display number of records at top
    ),
    selection = "none"
  )

# Available "dom" settings:
# l - length changing input control
# f - filtering input
# t - The table!
# i - Table information summary
# p - pagination control
# r - processing display element

bs4_card(my_dt2, "Long employments")

```

## Ended employment before even starting it

Some employees have a date indicating employment was ended before or at the start date.

:::{.callout-note}
Some of these entries may be legit, but could also indicate a data quality issue.
:::

```{r}
#| label: fig-future-btf
#| fig-cap: Employees with end date before start date for employment
#| message: false
#| column: screen-inset-shaded

my_dt3 <- 
  check_hr_endsbeforebeg() |> 
  datatable(
    style = "bootstrap4", # "bootstrap" or "bootstrap4" or "auto" (for bslib)
    class = "table-bordered table-condensed table-sm",
    rownames = FALSE,
    height = "100%",
    escape = FALSE,
    extensions = "RowGroup",
    options = list(
#      rowGroup = list(dataSrc = 0),  # if rownames are used, increase index!
      paging = FALSE,
      dom = "iftr"  # display number of records at top
    ),
    selection = "none"
  )

# # Available "dom" settings:
# # l - length changing input control
# # f - filtering input
# # t - The table!
# # i - Table information summary
# # p - pagination control
# # r - processing display element

bs4_card(my_dt3, "Last modified in the future (or before employment started)")

```

## Deviant SCB topics

Some employees have been tagged with a non-existent SCB research area code

:::{.callout-note}
Note that some of these entries may be legit, but could also indicate a data quality issue.
:::

```{r}
#| label: fig-topic-deviants
#| fig-cap: Employees tagged with unusual SCB research area / topic codes
#| message: false
#| column: screen-inset-shaded

my_dt4 <- 
  check_hr_topics() |> 
  datatable(
    style = "bootstrap4", # "bootstrap" or "bootstrap4" or "auto" (for bslib)
    class = "table-bordered table-condensed table-sm",
    rownames = FALSE,
    height = "100%",
    escape = FALSE,
    extensions = "RowGroup",
    options = list(
#      rowGroup = list(dataSrc = 0),  # if rownames are used, increase index!
      paging = FALSE,
      dom = "iftr"  # display number of records at top
    ),
    selection = "none"
  )

# Available "dom" settings:
# l - length changing input control
# f - filtering input
# t - The table!
# i - Table information summary
# p - pagination control
# r - processing display element

bs4_card(my_dt4, "Deviant SCB research area topic codes")

```

## Control characters in names

Some employee have names (firstnames and lastnames) which contain control characters (such as double spaces or tabs).

:::{.callout-note}
Due to the nature of some of these control characters, they may not be easy to spot in the table. Double or triple (or more) spaces, tabs and so on are caught in this test.
:::

```{r}
#| label: fig-controlcharacters-in-names
#| fig-cap: Employees with names that could be cleaned from control characters
#| message: false
#| column: screen-inset-shaded

my_dt5 <- 
  check_hr_fullname() |> 
  datatable(
    style = "bootstrap4", # "bootstrap" or "bootstrap4" or "auto" (for bslib)
    class = "table-bordered table-condensed table-sm",
    rownames = FALSE,
    height = "100%",
    escape = FALSE,
    extensions = "RowGroup",
    options = list(
#      rowGroup = list(dataSrc = 0),  # if rownames are used, increase index!
      paging = FALSE,
      dom = "iftr"  # display number of records at top
    ),
    selection = "none"
  )

# Available "dom" settings:
# l - length changing input control
# f - filtering input
# t - The table!
# i - Table information summary
# p - pagination control
# r - processing display element

bs4_card(my_dt5, "Control characters in names")

```

## Missing kthid

Some employees have missing kthid.

:::{.callout-note}
Note that these entries may be legit, but could also indicate a data quality issue.
:::

```{r}
#| label: fig-missing-kthid
#| fig-cap: Employees with missing kthid
#| message: false
#| column: screen-inset-shaded

my_dt6 <- 
  check_missing_kthid() |> 
  datatable(
    style = "bootstrap4", # "bootstrap" or "bootstrap4" or "auto" (for bslib)
    class = "table-bordered table-condensed table-sm",
    rownames = FALSE,
    height = "100%",
    escape = FALSE,
    extensions = "RowGroup",
    options = list(
#      rowGroup = list(dataSrc = 0),  # if rownames are used, increase index!
      paging = FALSE,
      dom = "iftr"  # display number of records at top
    ),
    selection = "none"
  )

# Available "dom" settings:
# l - length changing input control
# f - filtering input
# t - The table!
# i - Table information summary
# p - pagination control
# r - processing display element

bs4_card(my_dt6, "Missing kthid")

```

:::
